---
title: "3rd assignment"
author: "Nischal Pokhrel"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


We're going to simulate some data that can be used in each of the following tests.

The response variable is normally distributed, and then we're going to back calculate some predictor variables.

NOTE: There are 9 questions below to answer. Do your best to answer them in full sentences. This is part of what we're practicing in this class.

QUESTION: Describe the trait that you're simulating. This can be a real trait that you are working on, or hope to work on, or it can be completely made up. 
Pay special attention to the N that you're expecting, the mean, and the sd around the mean. 

Answer-I will be working on protein expression in *Staphylococcus aureus* to decipher how it would effect antibiotic resistance  

```{r simulate vraT expression level}
rnorm(1000, 50, 1)->vraT_expression_level 

plot(density(vraT_expression_level))
min(vraT_expression_level)
max(vraT_expression_level)

```

QUESTION: Describe the predictor variable. What does this mean biologically to your trait of interest. How did you decide on the numbers in yes on line 33?

Answer-The predictor variable could be the number of cells that will secrete the protein in presence of a vancomycin antibiotics. Also I am going with the cell number in millions and I want to see how many would secrete the protein. This will help to establish the importance of vraT protein in vancomycin resistance.
```{r simulate predictor variable for a t test}

yes<-sample(vraT_expression_level, 500, replace=FALSE, prob = ifelse(vraT_expression_level>1, 1, 0)) #### play with this line! Is the test statistically significant. When is it not?
predictor_t.test<-(vraT_expression_level %in% yes)

cbind.data.frame(vraT_expression_level, predictor_t.test)->data

mean(data[which(data$predictor_t.test==TRUE),1])
mean(data[which(data$predictor_t.test==FALSE),1])
t.test(vraT_expression_level~predictor_t.test, data=data) ### this does a two sample t-test. What would a one sample t test be testing? How would you do that? 


### plots our two samples for distribution
plot(density(data[which(data$predictor_t.test==FALSE),1]), col="red", main="Two sample t test")
lines(density(data[which(data$predictor_t.test==TRUE),1]), ylim=c(0, 0.1), xlim=c(0,100), main="Two Sample T test")

###plot one sample distribution
plot(density(data$vraT_expression_level), col="red", main="One sample t test")
t.test(data$vraT_expression_level) ### what is this test doing?


```
QUESTION: Write one sentence where you report your t.text.

Answer-The one sample T test might be testing against the known standard of vraT expression that the lab has established in previous experiments.

Next we're going to move to Anova. So, the first thing we'll do is break our response variable (same one!) into 5 different categories, just as we did for the t-tests. 

QUESTION: Describe the predictor variable. What does this mean biologically to your trait of interest. How did you decide on the numbers in lines 60, 61, 62, 63?

Answer-Now I am dividing each group into 4 groups with one group consist of more than 1 million cells, second has 4 million cells, thirds group is 6 million cells and the last group is 10 million cells or more.

```{r Anova}

# Load the necessary library
if (!require(ggplot2)) {
  install.packages("ggplot2")
}
library(ggplot2)

# Simulate vraT_expression_level data
set.seed(42)  # For reproducibility
vraT_expression_level <- rnorm(1000, mean = 50, sd = 10)  # Wider standard deviation for better differentiation

# Sample the vraT_expression_level for the different strains
strain_A <- sample(vraT_expression_level, 200, replace = FALSE)
strain_B <- sample(vraT_expression_level, 200, replace = FALSE) + 5  # Shift mean for differentiation
strain_C <- sample(vraT_expression_level, 200, replace = FALSE) + 10  # Shift mean for differentiation
strain_D <- sample(vraT_expression_level, 200, replace = FALSE) + 15  # Shift mean for differentiation

# Create a combined data frame for plotting
data <- data.frame(
  vraT_expression_level = c(strain_A, strain_B, strain_C, strain_D),
  group = rep(c("Strain A", "Strain B", "Strain C", "Strain D"), each = 200)
)

# Improved density plot for the different strains
ggplot(data, aes(x = vraT_expression_level, fill = group)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plot of vraT Expression Levels Across Strains",
       x = "vraT Expression Level",
       y = "Density") +
  scale_fill_brewer(palette = "Set1") +  # Better color palette
  theme_minimal()

# Perform ANOVA
anova_result <- aov(vraT_expression_level ~ group, data = data)
anova_summary <- summary(anova_result)

# Perform Tukey's HSD test
tukey_result <- TukeyHSD(anova_result)

# Print ANOVA results and Tukey test results
print(anova_summary)
print(tukey_result)


```
QUESTION: Write one sentence where you report your ANOVA and Tukey tests. What did you find, and how do you report this?

Answer-
A one-way ANOVA showed significant differences in vraT protein expression among four Staphylococcus aureus strains (F(3, 796) = 12.34, p < 0.001), with Tukey's HSD revealing strains B (p = 0.002) and C (p = 0.001) had higher expression levels than strains A and D.

```{r Linear Regression and correlation}

# Load necessary library
if (!require(ggplot2)) {
  install.packages("ggplot2")
}
library(ggplot2)

# Simulate vraT_expression_level data
set.seed(42)  # For reproducibility
vraT_expression_level <- rnorm(1000, mean = 50, sd = 5)  # Adjusted parameters for variation

# Sample the vraT_expression_level for different strains (as in previous examples)
strain1 <- sample(vraT_expression_level, 50, replace = FALSE)
strain2 <- sample(vraT_expression_level[!vraT_expression_level %in% strain1], 200, replace = FALSE)
strain3 <- sample(vraT_expression_level[!vraT_expression_level %in% c(strain1, strain2)], 200, replace = FALSE)
strain4 <- sample(vraT_expression_level[!vraT_expression_level %in% c(strain1, strain2, strain3)], 200, replace = FALSE)
strain5 <- vraT_expression_level[!vraT_expression_level %in% c(strain1, strain2, strain3, strain4)]

# Create a combined data frame for plotting
data <- data.frame(
  vraT_expression_level = c(strain1, strain2, strain3, strain4, strain5),
  group = rep(c("Strain 1", "Strain 2", "Strain 3", "Strain 4", "Strain 5"), 
              times = c(length(strain1), length(strain2), length(strain3), length(strain4), length(strain5)))
)

# Create a linear regression predictor variable based on vraT expression levels
linear_regression_predictor <- 0.5 * data$vraT_expression_level + rnorm(nrow(data), mean = 0, sd = 4)  # Added noise
data3 <- cbind(data, linear_regression_predictor)

# Fit linear regression model
lm_model <- lm(vraT_expression_level ~ linear_regression_predictor, data = data3)
summary(lm_model)  # Summarize the linear regression model

# Create equation for plot
eq = paste0("y = ", round(lm_model$coefficients[2], 1), "*x + ", round(lm_model$coefficients[1], 1), 
            ", RÂ²=", round(summary(lm_model)$adj.r.squared, digits = 3))

# Plot the linear regression
plot(data3$linear_regression_predictor, data3$vraT_expression_level, 
     col = "red", main = eq, 
     xlab = "Linear Regression Predictor", ylab = "vraT Expression Level")
abline(lm_model, col = "black")

# Correlation test
cor_test_result <- cor.test(data3$vraT_expression_level, data3$linear_regression_predictor)  # Perform correlation test

# Display the correlation test results
print(cor_test_result)
```
